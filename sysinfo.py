import psutil 
#import pypi3nvml
import os
import sys
import datetime
import platform
import socket
import uuid
import platform
import json
#import wmi
# hardware specific details 


def get_size(bytes: int, suffix="B") -> str:
    factor = 1024 # 2**10
    for unit in ["", "K", "M", "G", "T", "P"]:
        if bytes < factor:
            return f"{bytes:.2f}{unit}{suffix}"
        bytes /= factor


def get_cpu_user():
    cpu_user = {} #using dict to keep track of hardware details
    
    # CPU information
    
    cpu_info = psutil.cpu_times() # cpu info definition by psutil cpu times.
    platform_info = platform.processor()
    cpu_user['user'] = cpu_info.user
    cpu_user['system'] = cpu_info.system
    cpu_user['idle'] = cpu_info.idle
    cpu_user['nice'] = cpu_info.nice
    cpu_user = {
        'frequency': psutil.cpu_freq(),
        'stats': psutil.cpu_stats(),
        'proccessor': platform_info,
        'cores':psutil.cpu_count(),
    }

    
    return cpu_user

#print(get_cpu_user())
# boot_time = datetime.datetime.now()
def getboot_time():
    # Get the system boot time
    boot_time = psutil.boot_time()
    boot_info = {}
    boot_time_datetime = f"{datetime.datetime.fromtimestamp(boot_time)}"
    boot_info={
        'name': "booting_time",
        'value': boot_time_datetime
    }
    # Convert the boot time to a date and time
   

    return boot_info


def get_directory():
    sys_directory = {}
    system_directory = os.getenv("SystemRoot") or os.getenv("ROOT")
    sys_directory = {
        'name': "sys_directory",
        'value': system_directory,
    }
    return sys_directory
"""
def get_hotfixes():
    # Connect to the WMI service
    wmi_service = wmi.WMI()

    # Query the Hotfix table
    hotfixes = wmi_service.Win32_QuickFixEngineering()

    # Extract the hotfix information
    hotfixes_info = []
    for hotfix in hotfixes:
        hotfix_info = {
            'id': hotfix.HotFixID,
            'description': hotfix.Description
        }
        hotfixes_info.append(hotfix_info)

    return hotfixes_info

hotfixes_info = get_hotfixes()

for hotfix in hotfixes_info:
    print(f"{hotfix['id']}: {hotfix['description']}")

"""



def get_system_info():
    platform_info = platform.uname()
    """Get various information about the system"""
    system_info = {} # using dict to store system information
    # Get system name
    system_info['system'] = platform.system()
    system_info['os_name'] = platform_info.system
    # Get hostname
    system_info['hostname'] = socket.gethostname()
    # Get MAC addnet_infos
    system_info['mac_addnet_infos'] = ':'.join(["%02x" % (((uuid.getnode()) >> 8*i) & 0xff) for i in range(6)][::-1])
    # Get system release and version
    
    system_info['release'] = platform.release()
    system_info['version'] = platform.version()
    
    return system_info
#print(get_system_info())
# give us a list of all the partitions on the system
def get_disk_partitions():
    # Get the disk partitions
    partitions = psutil.disk_partitions()

    # Extract the partition information
    partitions_info = []
    for partition in partitions: # for each partition in the system
        partition_info = {
            'device': partition.device,
            'mountpoint': partition.mountpoint,
            'fstype': partition.fstype,
            'opts': partition.opts
        }
        partitions_info.append(partition_info)

    return partitions_info



#for partition in partitions_info:
    ####print(f"Options: {partition['opts']}")


"""
def get_gpu_info():
    # Initialize the NVML library
    py3nvml.nvmlInit()

    # Get the number of GPUs in the system
    num_gpus = py3nvml.nvmlDeviceGetCount()

    # Get the GPU information
    gpu_info = {}
    gpu_info = {
        'handle' : py3nvml.nvmlDeviceGetHandleByIndex(i),
        'name' : py3nvml.nvmlDeviceGetName(handle).decode('utf-8'),
        'memory_info':py3nvml.nvmlDeviceGetMemoryInfo(handle),
        'temp': py3nvml.nvmlDeviceGetTemperature(handle, py3nvml.NVML_TEMPERATURE_GPU),
        'power_usage':py3nvml.nvmlDeviceGetPowerUsage(handle),
        'utilization_rate':py3nvml.nvmlDeviceGetUt,

    }
    return gpu_info
"""
def getSwapInfo():
    swap = psutil.swap_memory()
    swap_info = {}
    swap_info['name'] = "swap memory"
    # get the swap memory details (if exists)
    swap_info['total'] = f"Total: {get_size(swap.total)}"
    swap_info['free'] = f"Free: {get_size(swap.free)}"
    swap_info['used'] = f"Used: {get_size(swap.used)}"
    swap_info['percentage'] = f"Percentage: {swap.percent}%"
    return swap_info
#print(getSwapInfo())
# memory information
def get_memory_info():
    # Get the memory information
    memory_info = psutil.virtual_memory()
    memory={} # using dictionary to store the memory information
    # Extract the total, available, and used memory
    memory['total_memory'] = get_size(memory_info.total)
    memory['avaialable_memory'] = get_size(memory_info.available)
    memory['used_memory'] = get_size(memory_info.used)
    memory['used_percentage'] = memory_info.percent
    return memory
# network information bytes coming and going 
def getNetInfo():
    net_info = {}
    net_io = psutil.net_io_counters()
    net_info['name'] = "net_info"
    net_info['bytes_sent'] = f"Total Bytes Sent: {get_size(net_io.bytes_sent)}"
    net_info['bytes_recv'] = f"Total Bytes Received: {get_size(net_io.bytes_recv)}"
    return net_info

# print(get_memory_info())
def all_info() -> dict:
    all_info = dict()
    all_info['main_system'] = get_system_info()
    all_info['swap_memory'] = getSwapInfo()
    all_info['memory_info'] = get_memory_info()
    all_info['network_info'] = getNetInfo()
    all_info['boot_time'] = getboot_time()
    all_info['cpu_info'] = get_cpu_user()
    all_info['disk_info'] = get_disk_partitions()
    # all_info['hot_fix'] = get_hotfix_info() window.location.reload();
    # all_info['gpu_info'] = get_gpu_info() gpu library didnt work but the code has been written.
    return all_info   



   

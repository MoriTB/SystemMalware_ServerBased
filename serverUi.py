import socket
import threading
import time
import json
import tkinter as tk
from PIL import Image, ImageTk
"""ui functions"""
temp_chk = False
# Create a function to show the text
def show_text(text,window):
    # Create a label to display the text
    text_label = tk.Label(text=text, font=("Helvetica", 18, "bold"), fg="green", bg="black")
    text_label.pack()

    # Schedule a function to remove the text after 3 seconds
    #window.after(3000, remove_text(text_label))

# Create a function to remove the text
def remove_text(text_label):
    # Remove the text label from the UI
    text_label.destroy()

# it will close everything from connection to the ui.
def close_window(connection,window):
    a = "exit"
    connection.send(a.encode())
    connection.close()
    print("connection closed")
    temp_chk =True
    window.destroy()

def write(data):
    with open("output.txt", "w") as f:
                print("writing happened.")
                f.write(data)
                print("after writing")


def send_data(connection):
    print("for soeee")
    a = input("order is? (exit/sysinfo)")
    print(a)
    connection.send(a.encode())
# we have designed a function to send data to the server and another button to close the window and shut down.
def send_data2(connection,window):
    a = "sysinfo"
    print("your using me")
    print(connection)
    connection.send(a.encode())
    data = connection.recv(8192).decode()
    data = json.loads(data)
    json_formatted_str = json.dumps(data, indent=2)
    print(json_formatted_str)
    show_text("the new update is recieved.",window)
    write(json_formatted_str)
    


def receive_data(connection):
    data = connection.recv(8192).decode()
    data = json.loads(data)
    json_formatted_str = json.dumps(data, indent=2)
    print(json_formatted_str)
    return json_formatted_str

    # Close the connection with the server

    return data

def run_server():
    # Set the host and port for the server
    host = "127.0.0.1"
    port = 5040

    # Start the server and listen for incoming connections
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((host, port))
    s.listen(3)
    clients = []
    if temp_chk ==True :
        s.close()
    first_rcv_chk = True
    # Accept incoming connections and process data
    while True:
        conn, addr = s.accept()
        print(conn)
        print(f"Connected to {addr}")
        data = receive_data(conn)
        write(data)

        try:
            window = tk.Tk()
            window.title("server UI")
            # Set the size of the window to 600x400 pixels
            window.geometry("600x400")  
            window.configure(bg="black")
            # Create a frame to hold the buttons
            button_frame = tk.Frame(window, bg="white", highlightthickness=1, highlightbackground="#333")
            button_frame.pack(side="bottom", fill="x")
            print("here")
            print(conn)
            request_button = tk.Button(button_frame, text="Request", font=("Helvetica", 12, "bold"), fg="#333", bg="white", width=10, height=2, command=lambda:send_data2(conn,window))
            print("here 3")
            print(conn)                                                                                
            request_button.pack(side="left", padx=10)
            exit_button = tk.Button(button_frame, text="Exit", font=("Helvetica", 12, "bold"), fg="#333", bg="white", width=10, height=2, command=lambda:close_window(conn,window))
            exit_button.pack(side="right", padx=10)
            print("here 2")
            print("here?")
            if first_rcv_chk == True:
                print("we in ")
                show_text("automate detail has been received",window)
                first_rcv_chk = False
            print('wf?')
            
            window.mainloop()
                
        except Exception as e:
            print(e)

if __name__ == "__main__":
    print("server is online.")
    run_server()